// RememberMe
1. 세션이 만료되고 웹 브라우저가 종료된 후에도 어플리케이션이 사용자를 기억하는 기능을 지원하는 필터
2. Remember-Me 쿠키에 대한 Http 요청을 확인(쿠키를 확인)한 후 사용자의 쿠키를 이용해서 토큰 기반 인증을 통해유효성을 검사하고 토큰이 검증되면 사용자는 로그인이 됨.
3. 사용자 라이프 사이클
	- 인증성공 (Remember-Me 쿠키 설정)
	- 인증실패 (쿠키가 존재하면 쿠키 무효화)
	- 로그아웃 (쿠키가 존재하면 쿠키 무효화)


// 일반적인 Mechanism (remember-me 를 체크하지 않고 인증했을 때를 말함.)
1. 로그인을 하고 index 에 들어왔다는 것은 인증이 되었다는의미임. 또한 인증이 되었다는 의미는 Spring Security 에서 사용자의 세션이 생성되었고,
   그 세션이 성공한 인증객체(Authentication)를 담고있는 상태임.
2. 이제 Server 는 인증에 성공한 사용자에게 JSESSIONID  라는 쿠키이름으로 세션을 응답헤더로 달게시킴. (Set-Cookie).
3. 이제 Client 는 해당 서버의 모든 요청마다 JSESSIONID 이름으로 세션을 같이보내는데, 인증을 받지않아도 됨. 인증을 받지않아도 되는 이유는
   Server 는 Client 가 보낸 쿠키중 하나인 JSESSIONID 에서 SecurityContext 를 꺼내고, SecurityContext 안의 인증객체(Authentication) 을 꺼내게 되는데
   이 인증객체와, Server 에 저장되어있는 SecurityContext 안의 인증객체를 비교하기 때문임.
4. 하지만 인증된 Client 임에도 불구하고 JSESSIONID 라는 쿠키를 지워서 Server 에게 요청을 보내면, 다시 인증을 받아야하는 login 페이지로 이동함.
   그 이유는 Client 가 JSESSIONID 을 삭제하여 요청을보냈기 때문에, 서버의 스프링 시큐리티는 기존의 JSESSIONID 를 찾지못하고
   JSESSIONID 가 없으면 SecurityContext 또한 없는 것이고, 인증객체를(Authentication -> UserDetails) 을 찾지못하기 때문에 사용자로 취급되는 것임.


// 리멤버미 Mechanism (remember-me 를 체크하고 인증했을 때를 의미함.)
1. 리멤버미를 체크하고 로그인하면 Server 는 JSESSIONID 는 물론이고, remember-me 라는 이름의 쿠키도 발급하여 Client 에게 보내게 됨. (Set-Cookie 헤더에 달아서)
   remember-me 쿠키값에는 인코딩된 문자열에는 인증당시 사용했던 userid, password, expired 이 담겨있음.
2. 여기서, JSESSIONID 값을 삭제하고 Server 에 요청을 보내면 리멤버미 인증을 사용하기 전과 다르게 다시 인증을 받지않아도 정상적으로 사이트에 접속이 됨.
   그 이유는 JSESSIONID 가 없다 하더라도 Spring Security 는 remember-me 라는 쿠키값을 가지고왔을 경우를 체크하기 때문임. (RememberMeAuthenticationFilter 가 수행)
   따라서 요청 헤더에 remember-me 쿠키명을 가진 값이 있다면, 값을 디코딩하고 파싱하고 추출하여 userid, password 를 통해 User 계정을 얻고, 얻은 계정으로 다시 인증을 수행하는 것임.
   결국 remember-me 쿠키로 인증을 성공하게 되면 Server 는 인증객체를 SecurityContext 에 담고 SecurityContext 를 세션에 담아, JSESSIONID  라는 쿠키를 달으라는 Response 를 내리게됨. (Set-Cookie)
   따라서 페이지가 정상적으로 로딩이 되고, 삭제해서 요청을 보냈던  JSESSIONID 값이 다시 생기게 되는 것임.


// RememberMeAuthenticationFilter 역할
1. RememberMeAuthenticationFilter 사용자 요청을 받아서 처리하는 조건이 있음.
   첫번째조건은 Authentication 객체가 null 일 경우임. 여기서 생각해볼점은 SecurityContext 안에 Authentication 이 없다는 뜻은 곧 인증된 사용자가 아님을 의미하며
   사용자 세션이 만료되었거나 끊어져서 더이상 Session 안의 SecurityContext 를 찾지못하거나 그 SecurityContext 가 존재하지 않기때문에 Authentication 이 없을 경우임.
   따라서 이러한 경우에 RememberMeAuthenticationFilter 가 작동함.
   두번째 조건은 최초 폼인증 당시, RememberMe 기능을 체크하고 인증을 성공하여 remember-me 쿠키가 발급되어, remember-me 갖고 서버에 접속했을 경우. (그냥 remember-me 쿠키를 갖고오는 경우임)
2. 만약 Authentication 가 null 이 아니면, RememberMeAuthenticationFilter 는 동작하지 않음. 그 이유는 Authentication 이 null 이 아니면 이미 인증을 받아 인증객체가 존재하기때문에 다시 인증을 받을 필요가 없는 것임.
3. RememberMeAuthenticationFilter 는 인증을 받은 사용자가 세션타임아웃에 해당해서 세션이 만료되었거나, 사용자의 브라우저가 종료되어 세션이 끊긴경우 세션이 더 이상 활성화되지 않아 Session 안의 SecurityContext 에서 인증 객체를 찾지 못하는 경우에
   자동적으로 사용자의 인증을 유지하기 위해 RememberMeAuthenticationFilter 가 인증을 시도하는 것임.
4. 즉 RememberMeAuthenticationFilter 가 작동하는 조건은 인증객체가 null 인경우와 사용자가 remember-me 쿠키를 가져오는 경우임.


// RememberMeAuthenticationFilter 동작, 처리 순서
1. Session 만료, remember-me 토큰 o 인 요청이 들어옴
2. RememberMeAuthenticationFilter 가 동작하여 RememberServices 를 호출하여 Token Cookie 를 추출. (실제적으로 RememberServices 인터페이스의 구현체들이 리멤버미 인증처리를 함.)
   TokenBasedRememberMeService : 메모리에 저장한 리맴버미 토큰과 사용자가 요청할때 들고온 리맴버미 토큰을 비교하는 역할울 수행, (기본 14일 만료 기간을 갖음)
   PersistentTokenBasedRememberMeServices : DB에 저장한 리맴버미 토큰과 사용자가 요청할때 들고온 리맴버미 토큰을 비교하는 역할울 수행. (영구적인 방식.)
3. 추출한 토큰 이름이 remember-me 인지 확인하여 Token 이 존재하는지 체크함. (remember-me 쿠키가 아니거나 존재하지 않으면, 다음필터로 이동)
4. 토큰이존재하면 토큰이 정상적인 포맷으로 이루어진 토큰인지 검증. (정상이아니면 Exception)
5. 사용자가 들고온 토큰의 값과 서버에 저장된 토큰의 값이 일치하는지 보게됨 (일치하지 않으면 Exception)
6. 토큰이 일치하면 토큰에 포함된 정보중 하나인 User 정보를 통해 서버 혹은 DB 에 저장된 User 를 조회하여, remember-me 토큰속 유저계정이 존재하는지 확인함. (존재하지 않으면 Exception)
7. User 계정이 존재하면 새로운 인증객체 Authentication(RememberMeAuthenticationToken)을 생성하고 AuthenticationManager 에게 인증처리를 부탁함.


// Associate
AbstractAuthenticationProcessingFilter
RememberMeAuthenticationFilter
AbstractRememberMeServices
RememberMeServices (TokenBasedRememberService : 메모리에 실제로 저장한 토큰과 사용자가 요청에 들고온 쿠키 와 비교해서 인증처리를 하는 구현체 (14일 기본)
		           (PersistentTokenBasedRememberMeServices : DB 에 저장한 토큰과 사용자가 요청에 들고온 쿠키와 비교해서 인층처리를 하는 구현체)
Authentication(RememberMeAuthenticationToken)


// DEBUG (리멤버미를 체크하고 로그인할 경우)
AbstractAuthenticationProcessingFilter (successfulAuthentication() : Line 325)
AbstractRememberMeServices (loginSuccess() : Line 278,282, rememberMeRequested() : Line 304, setCookie() : Line 365)
TokenBasedRememberMeServices (onLoginSuccess() : Line 154)
SavedRequestAwareAuthenticationSuccessHandler 여기서  AuthenticationSuccessHandler 를 수행


// DEBUG (인증된 상태에서 JSESSIONID 를 삭제하고 요청을보낼 경우 = Authentication x , remember-me o)
RememberMeAuthenticationFilter (doFilter() : Line 102) -> Authentication 객체가 없으면 RememberMeServices 에게 인증위임하는 과정
AbstractRememberMeServices (autoLogin() : Line 124, extractRememberMeCookie() : 169) -> 리멤버미 쿠키가 있는지 확인하는 과정
AbstractRememberMeServices (autoLogin() : Line 139) ->  인증객체생성메서드 실행
AbstractRememberMeServices (createSuccessfulAuthentication() : Line 194) -> 새로운 인증객체 (RememberMeAuthenticationToken) 를 생성 후에 인증
* 그 뒤엔 ProviderManager 등등이 인증수행하고RememberMeAuthenticationFilter 가 다시 SecurityContext 안에 인증객체를 넣음. (SecurityContext 인에 인증객체를 넣어서 스프링시큐리티는 인증된 사용자로 간주)
